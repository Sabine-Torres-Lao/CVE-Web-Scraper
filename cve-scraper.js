const axios = require('axios');
const cheerio = require('cheerio');
const ExcelJS = require('exceljs');
const express = require('express');
const app = express();

const PORT = 8000;
//url that we will scrape from
const base_url = 'https://www.cvedetails.com/vulnerability-list.php?page=';

async function scrapePage(pageNumber) {
    try {
        //navigate to all of the pages in the search results
        const url = `${base_url}${pageNumber}`;

        //get data from html code
        const response = await axios.get(url);
        const html = response.data;
        const $ = cheerio.load(html);
        const vulnerabilities = [];

        $('[data-tsvfield="cveinfo"]').each(function () {
            const vulnerability = {};
            const $row = $(this);

            //extract cve number
            vulnerability.cve = $row.find('a[href^="/cve/CVE-"]').text();

            //extract description
            vulnerability.description = $row.find('.cvesummarylong').text();

            //extract cvss as number
            vulnerability.cvss = parseFloat($row.find('[data-tsvfield="maxCvssBaseScore"]').text());

            //extract last updated date
            vulnerability.updated = $row.find('[data-tsvfield="updateDate"]').text();

            //push into vulnerabilities array
            vulnerabilities.push(vulnerability);
        });

        return vulnerabilities;
    } catch (err) {
        //error message
        console.error(`Error scraping page ${pageNumber}: ${err}`);
        return [];
    }
}

async function scrapeAndSaveData() {
    //scrape all of the pages
    const totalPages = 1125;

    const allVulnerabilities = [];

    //loop to scrape all of the pages
    for (let page = 1; page <= totalPages; page++) {
        const vulnerabilities = await scrapePage(page);
        allVulnerabilities.push(...vulnerabilities);
    }

    //create excel sheet with data
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('CVE Vulnerabilities');

    //define headers
    worksheet.columns = [
        { header: 'CVE', key: 'cve' },
        { header: 'Description', key: 'description' },
        { header: 'CVSS', key: 'cvss' },
        { header: 'Last Updated', key: 'updated' },
    ];

    allVulnerabilities.forEach((vulnerability) => {
        worksheet.addRow(vulnerability);
    });

    await workbook.xlsx.writeFile('cve-data-5399900.xlsx');
    console.log('CVE data saved to cve-data-5399900.xlsx');
}

scrapeAndSaveData();

app.listen(PORT, () => console.log(`Server running on PORT ${PORT}`));
