const axios = require('axios');
const cheerio = require('cheerio');
const ExcelJS = require('exceljs');
const express = require('express');
const app = express();

const PORT = 8000;
//url that we will scrape from
const base_url = 'https://www.cvedetails.com/product-list/';

async function scrapePage(pageNumber) {
    try {
        //navigate to all of the pages in the search results
        const url = `${base_url}${pageNumber}`;

        //get data from html code
        const response = await axios.get(url);
        const html = response.data;
        const $ = cheerio.load(html);
        const vulnerabilities = [];

        $('tr:not(:first-child)').each(function () {
            const $row = $(this);
            const vulnerability = {}; // Create a new vulnerability object for each row

            //extract product name
            const productTitle = $row.find('a[title*="versions list"]').text().trim();
            if (productTitle) {
                vulnerability.product = productTitle;
                console.log("Product:", productTitle);
            }

            //extract vendor name
            const vendorTitle = $row.find('a[title*="Details for"]').text().trim();
            if (vendorTitle) {
                vulnerability.vendor = vendorTitle;
                console.log("Vendor:", vendorTitle);
            }

            //extract vulnerabilties as number
            const vulnerabilitiesText = $row.find('td.num').text().trim();
            const vulnerabilitiesLink = $row.find('a[title*="See all vulnerabilities of this product"]');
            const vulnerabilityCount = vulnerabilitiesLink.length > 0 ? parseInt(vulnerabilitiesLink.text().trim()) : parseFloat(vulnerabilitiesText);

            //check if vulnerabilities is a valid number
            if (!isNaN(vulnerabilityCount)) {
                vulnerability.vulnerabilities = vulnerabilityCount;
                console.log("Vulnerabilities:", vulnerability.vulnerabilities);
            }

            //extract type
            const typeElement = $row.find('td:eq(3)'); // 4th <td> element (index 3)
            vulnerability.type = typeElement.text().trim();
            console.log("Type:", vulnerability.type);

            //check if vulnerability object is not empty, then push into array
            if (Object.keys(vulnerability).length > 0) {
                vulnerabilities.push(vulnerability);
            }
        });

        return vulnerabilities;
    } catch (err) {
        //error message
        console.error(`Error scraping page ${pageNumber}: ${err}`);
        return [];
    }
}

async function scrapeAndSaveData() {
    try {
        //load cve_data.xlsx
        const existingWorkbook = await new ExcelJS.Workbook().xlsx.readFile('cve_data.xlsx');
        const worksheetName = 'Software Vulnerabilities';

        //overwrite worksheet if it exists
        if (existingWorkbook.getWorksheet(worksheetName)) {
            existingWorkbook.removeWorksheet(worksheetName);
        }

        //add worksheet
        const worksheet = existingWorkbook.addWorksheet(worksheetName);

        //define headers
        worksheet.columns = [
            { header: 'Product', key: 'product' },
            { header: 'Vendor', key: 'vendor' },
            { header: 'Vulnerabilities', key: 'vulnerabilities' },
            { header: 'Type', key: 'type' },
        ];

        //scrape all of the pages
        const totalPages = 180;
        const allVulnerabilities = [];

        //loop to scrape all of the pages
        for (let page = 1; page <= totalPages; page++) {
            const vulnerabilities = await scrapePage(page);
            allVulnerabilities.push(...vulnerabilities);
        }

        //add data to worksheet
        allVulnerabilities.forEach((vulnerability) => {
            worksheet.addRow(vulnerability);
        });

        //save workbook with data
        await existingWorkbook.xlsx.writeFile('cve_data.xlsx');
        console.log('CVE data saved to cve_data.xlsx');
    } catch (err) {
        console.error(`Error: ${err}`);
    }
}

scrapeAndSaveData();

app.listen(PORT, () => console.log(`Server running on PORT ${PORT}`));